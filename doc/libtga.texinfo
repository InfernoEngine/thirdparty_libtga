@c %**start of header
@setfilename libtga.info
@settitle Libtga 0.1.0 API Reference Manual
@setchapternewpage odd
@c %**end of header

@ifinfo
This is the Libtga 0.1.0 API Reference Manual

Copyright @copyright{} 2001 Matthias Brueckner
@end ifinfo

@titlepage
@sp 10
@center @titlefont{Libtga 0.1.0 API Reference Manual}

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001 Matthias Brueckner
@end titlepage

@node Top, Introduction, , (dir)

@menu
* Introduction::	Introduction 
* Data types::		Data types
* Error handling:: 	Error handling
* Reading::       	Reading
* Writing::      	Writing
* Other::		Other
@end menu

@node Introduction, Data types, Top, Top
@unnumbered Introduction
This is the API Reference Manual for Libtga. It describes all public variables, functions and structures of this library, but not the internals. 
Useful for all those, who want to use the library within their own programs.

@node Data types, Error handling, Introduction, Top
@chapter Data types
This section describes the data types that are part of the library interface.

@menu
* Variables::		Variables
* Structures::		Structures
@end menu

@node Variables, Structures, , Data types
@subsection Variables
The variable types used in Libtga are only typedefs for the builtin types.@*
@sp 1
@code{ tga_uint_8 } is 1 byte@*
@code{ tga_uint_16 } is 2 bytes@*
@code{ tga_uint_32 } is 4 byte@*
@sp 1
The following are typedefs for the above:@*
@table @code
@item typedef tga_uint_8 tga_byte
@item typedef tga_uint_8 tga_err_t
@item typedef tga_uint_8 tga_size_t
@item typedef tga_uint_32 tga_off_t
@end table

@*
@node Structures, , Variables, Data types
@subsection Structures
Two structures are important to the user. The first is @code{struct tga_info} .It contains all the information about the image. The structure is declared as follows (in the future functions will be added to shield you from having to access the structure directly):
@sp 1
@code{struct tga_info@{
@*
tga_uint_8	id_len;@*
tga_uint_8 	map_t;@*
tga_uint_8 	img_t;@*
tga_uint_16 	map_len;@*
tga_uint_16 	map_first_entry;@*
tga_uint_8 	map_entry_size;@*
tga_uint_16 	x;@*
tga_uint_16 	y;@*
tga_uint_16 	width;@*
tga_uint_16 	height;@*
tga_uint_8 	depth;@*
tga_uint_8 	desc;@*
@}};
@sp 1
@table @code
@item id_len
length of the image id field
@item map_t
color map type (1 = color map, 0 = none)
@item img_t
image type
@item map_len 
number of entries in color map
@item map_first_entry
index of first color map entry
@item map_entry_size
size (depth) of each color map entry
@item x
x-coordinate of lower-left corner
@item y
y-coordinate of lower-left corner
@item width
width of image in pixels
@item height
height of image in pixels
@item depth
depth of image in pixels
@item desc
image descriptor byte
@end table
@sp 1
The second is @code{struct tga}. This structure holds the data (color map, image data) of image:@*
@sp 1
@code{struct tga@{@*
tga_byte	*img_id;@*
tga_byte	*img_data;@*
tga_byte	*color_map;@*
void		*io_ptr;@*
tga_io_func	read_fn;@*
tga_io_func	write_fn;@*
tga_warn_func	warn_fn;@*
tga_err_func	err_fn;@*
tga_byte	*sig;@*
tga_uint_32	flags;@*
tga_uint_8	format;@*
@}};
@sp 1
@table @code
@item tga_byte *img_id;
image id field
@item tga_byte *img_data;
actual image data
@item tga_byte *color_map;
color map data
@item void *io_ptr;
Pointer to input/output stream.
@item tga_io_func read_fn;
user-defined read function.
@item tga_io_func write_fn;
user-defined write function.
@item tga_warn_func warn_fn;
user-defined warn function.
@item tag_err_func err_fn;
user-defined error function.
@item tga_byte *signature;
File signature contained in the file footer.
@item tga_uint_32 flags;
Status flags for the library functions.
@item tag_uint_8 format;
new/old format flag.
@end table

@node Error handling, Reading, Data types, Top
@chapter Error handling
There are two functions that are called in case of an error:@*
@sp 1
        @code{void tga_error(tga_ptr ptr, char *msg, tga_err_t errno);}@*
        @code{void tga_warning(tga_ptr ptr, char *msg, tga_err_t errno);}@*
@sp 1
@code{tga_error} is called when a serious error occurred. The first argument is a pointer to a tga structure, to give the error handling function the possibility to free all the memory associated with this pointer before terminating. The second argument contains some kind of an error message. The third argument contains the error number, which can be used by the error function to find out which error occurred (similar to libc's @code{errno}). Possible error flags are:
@sp 1
@table @code
@item TGA_ERROR        
Unknown error
@item TGA_ERROR_MEM    
Memory allocation error
@item TGA_ERROR_READ   
Read error
@item TGA_ERROR_WRITE  
Write error
@item TGA_BAD_ARG      
Invalid argument
@item TGA_BAD_FD       
Invalid file descriptor
@item TGA_BAD_FORMAT   
Invalid format
@end table
@sp 1 
@code{tga_warning} is called when a not so serious error occurred from which the library can recover. The arguments are of the same meaning as to @code{tga_error}.

Both functions can be replaced through user-defined functions at run-time by the function:@*
@sp 1
        @code{void tga_set_error_fn(tga_ptr ptr, tga_err_func err_fn , tga_warn_func warn_fn);}@*
@sp 1
The second and the third parameters take the addresses of the error function or the warning function respectively.

@node Reading, Writing, Error handling, Top
@chapter Reading

@table @code
@item void tga_read_tga(tga_ptr ptr, tga_info_ptr, tga_uint_32 flags);
Read image header and all sections specified in @code{flags}.
Currently valid flags are
@code{TGA_IMAGE_DATA TGA_IMAGE_ID TGA_COLOR_MAP}
@item void tga_read_info(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);
Read image header at beginning of file.
@item void tga_read_image_data(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);
Read image data.
@item void tga_read_data(tga_ptr ptr, tga_byte *buf, tga_uint_32 len);
Read @code{len} bytes info @code{buf}.
@item void tga_set_read_fn(tga_ptr ptr, tga_io_func read_fn);
Set default read data function.
@end table

@node Writing, Other, Reading, Top
@chapter Writing

@table @code
@item void tga_write_tga(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);
Write image header and all sections specified in @code{flags}.
See @code{tga_read_tga()} for valid flags.
@item void tga_write_info(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);
Write image header.
@item void tga_write_image_data(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);
Write image data.
@item void tga_write_data(tga_ptr ptr, tga_byte *buf, tga_uint_32 len);
Write @code{len} bytes from @code{buf}.
@item void tga_set_write_fn(tga_ptr ptr, tga_io_func write_fn);
Set default write data function.
@end table

@node Other, , Writing, Top
@chapter Other

@table @code
@item tga_uint_8 tga_get_x_orientation(tga_ptr ptr);
Returns either @code{TGA_LEFT} or @code{TGA_RIGHT}
@item tga_uint_8 tga_get_y_orientation(tga_ptr ptr);
Returns either @code{TGA_TOP} or @code{TGA_BOTTOM}
@end table

@contents
@bye



