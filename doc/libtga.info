Dies ist libtga.info, hergestellt von Makeinfo Version 4.0 aus
libtga.texinfo.

   This is the Libtga 0.1.0 API Reference Manual

   Copyright (C) 2001 Matthias Brueckner


File: libtga.info,  Node: Top,  Next: Introduction,  Up: (dir)

* Menu:

* Introduction::	Introduction
* Data types::		Data types
* Error handling:: 	Error handling
* Reading::       	Reading
* Writing::      	Writing
* Other::		Other


File: libtga.info,  Node: Introduction,  Next: Data types,  Prev: Top,  Up: Top

Introduction
************

   This is the API Reference Manual for Libtga. It describes all public
variables, functions and structures of this library, but not the
internals.  Useful for all those, who want to use the library within
their own programs.


File: libtga.info,  Node: Data types,  Next: Error handling,  Prev: Introduction,  Up: Top

Data types
**********

   This section describes the data types that are part of the library
interface.

* Menu:

* Variables::		Variables
* Structures::		Structures


File: libtga.info,  Node: Variables,  Next: Structures,  Up: Data types

Variables
---------

   The variable types used in Libtga are only typedefs for the builtin
types.

` tga_uint_8 ' is 1 byte
` tga_uint_16 ' is 2 bytes
` tga_uint_32 ' is 4 byte

The following are typedefs for the above:
`typedef tga_uint_8 tga_byte'

`typedef tga_uint_8 tga_err_t'

`typedef tga_uint_8 tga_size_t'

`typedef tga_uint_32 tga_off_t'

File: libtga.info,  Node: Structures,  Prev: Variables,  Up: Data types

Structures
----------

Two structures are important to the user. The first is `struct
tga_info' .It contains all the information about the image. The
structure is declared as follows (in the future functions will be added
to shield you from having to access the structure directly):


   `struct tga_info{
tga_uint_8	id_len;
tga_uint_8 	map_t;
tga_uint_8 	img_t;
tga_uint_16 	map_len;
tga_uint_16 	map_first_entry;
tga_uint_8 	map_entry_size;
tga_uint_16 	x;
tga_uint_16 	y;
tga_uint_16 	width;
tga_uint_16 	height;
tga_uint_8 	depth;
tga_uint_8 	desc;
}';


`id_len'
     length of the image id field

`map_t'
     color map type (1 = color map, 0 = none)

`img_t'
     image type

`map_len'
     number of entries in color map

`map_first_entry'
     index of first color map entry

`map_entry_size'
     size (depth) of each color map entry

`x'
     x-coordinate of lower-left corner

`y'
     y-coordinate of lower-left corner

`width'
     width of image in pixels

`height'
     height of image in pixels

`depth'
     depth of image in pixels

`desc'
     image descriptor byte


   The second is `struct tga'. This structure holds the data (color
map, image data) of image:

`struct tga{
tga_byte	*img_id;
tga_byte	*img_data;
tga_byte	*color_map;
void		*io_ptr;
tga_io_func	read_fn;
tga_io_func	write_fn;
tga_warn_func	warn_fn;
tga_err_func	err_fn;
tga_byte	*sig;
tga_uint_32	flags;
tga_uint_8	format;
}';


`tga_byte *img_id;'
     image id field

`tga_byte *img_data;'
     actual image data

`tga_byte *color_map;'
     color map data

`void *io_ptr;'
     Pointer to input/output stream.

`tga_io_func read_fn;'
     user-defined read function.

`tga_io_func write_fn;'
     user-defined write function.

`tga_warn_func warn_fn;'
     user-defined warn function.

`tag_err_func err_fn;'
     user-defined error function.

`tga_byte *signature;'
     File signature contained in the file footer.

`tga_uint_32 flags;'
     Status flags for the library functions.

`tag_uint_8 format;'
     new/old format flag.


File: libtga.info,  Node: Error handling,  Next: Reading,  Prev: Data types,  Up: Top

Error handling
**************

   There are two functions that are called in case of an error:

`void tga_error(tga_ptr ptr, char *msg, tga_err_t errno);'
`void tga_warning(tga_ptr ptr, char *msg, tga_err_t errno);'

`tga_error' is called when a serious error occurred. The first argument
is a pointer to a tga structure, to give the error handling function
the possibility to free all the memory associated with this pointer
before terminating. The second argument contains some kind of an error
message. The third argument contains the error number, which can be
used by the error function to find out which error occurred (similar to
libc's `errno'). Possible error flags are:


`TGA_ERROR'
     Unknown error

`TGA_ERROR_MEM'
     Memory allocation error

`TGA_ERROR_READ'
     Read error

`TGA_ERROR_WRITE'
     Write error

`TGA_BAD_ARG'
     Invalid argument

`TGA_BAD_FD'
     Invalid file descriptor

`TGA_BAD_FORMAT'
     Invalid format


   `tga_warning' is called when a not so serious error occurred from
which the library can recover. The arguments are of the same meaning as
to `tga_error'.

   Both functions can be replaced through user-defined functions at
run-time by the function:

`void tga_set_error_fn(tga_ptr ptr, tga_err_func err_fn , tga_warn_func
warn_fn);'

The second and the third parameters take the addresses of the error
function or the warning function respectively.


File: libtga.info,  Node: Reading,  Next: Writing,  Prev: Error handling,  Up: Top

Reading
*******

`void tga_read_tga(tga_ptr ptr, tga_info_ptr, tga_uint_32 flags);'
     Read image header and all sections specified in `flags'.
     Currently valid flags are `TGA_IMAGE_DATA TGA_IMAGE_ID
     TGA_COLOR_MAP'

`void tga_read_info(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);'
     Read image header at beginning of file.

`void tga_read_image_data(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);'
     Read image data.

`void tga_read_data(tga_ptr ptr, tga_byte *buf, tga_uint_32 len);'
     Read `len' bytes info `buf'.

`void tga_set_read_fn(tga_ptr ptr, tga_io_func read_fn);'
     Set default read data function.


File: libtga.info,  Node: Writing,  Next: Other,  Prev: Reading,  Up: Top

Writing
*******

`void tga_write_tga(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);'
     Write image header and all sections specified in `flags'.  See
     `tga_read_tga()' for valid flags.

`void tga_write_info(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);'
     Write image header.

`void tga_write_image_data(tga_ptr ptr, tga_info_ptr info, tga_uint_32 flags);'
     Write image data.

`void tga_write_data(tga_ptr ptr, tga_byte *buf, tga_uint_32 len);'
     Write `len' bytes from `buf'.

`void tga_set_write_fn(tga_ptr ptr, tga_io_func write_fn);'
     Set default write data function.


File: libtga.info,  Node: Other,  Prev: Writing,  Up: Top

Other
*****

`tga_uint_8 tga_get_x_orientation(tga_ptr ptr);'
     Returns either `TGA_LEFT' or `TGA_RIGHT'

`tga_uint_8 tga_get_y_orientation(tga_ptr ptr);'
     Returns either `TGA_TOP' or `TGA_BOTTOM'



Tag Table:
Node: Top172
Node: Introduction410
Node: Data types747
Node: Variables1008
Node: Structures1432
Node: Error handling3531
Node: Reading5022
Node: Writing5754
Node: Other6436

End Tag Table
